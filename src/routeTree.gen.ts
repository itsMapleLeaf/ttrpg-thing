/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedAccountRouteImport } from './routes/_protected/account'
import { Route as ProtectedRoomsSlugRouteImport } from './routes/_protected/rooms.$slug'
import { ServerRoute as ApiResizeImageServerRouteImport } from './routes/api/resize-image'

const rootServerRouteImport = createServerRootRoute()

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAccountRoute = ProtectedAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedRoomsSlugRoute = ProtectedRoomsSlugRouteImport.update({
  id: '/rooms/$slug',
  path: '/rooms/$slug',
  getParentRoute: () => ProtectedRoute,
} as any)
const ApiResizeImageServerRoute = ApiResizeImageServerRouteImport.update({
  id: '/api/resize-image',
  path: '/api/resize-image',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/account': typeof ProtectedAccountRoute
  '/': typeof ProtectedIndexRoute
  '/rooms/$slug': typeof ProtectedRoomsSlugRoute
}
export interface FileRoutesByTo {
  '/account': typeof ProtectedAccountRoute
  '/': typeof ProtectedIndexRoute
  '/rooms/$slug': typeof ProtectedRoomsSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/account': typeof ProtectedAccountRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/rooms/$slug': typeof ProtectedRoomsSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/account' | '/' | '/rooms/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/account' | '/' | '/rooms/$slug'
  id:
    | '__root__'
    | '/_protected'
    | '/_protected/account'
    | '/_protected/'
    | '/_protected/rooms/$slug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/resize-image': typeof ApiResizeImageServerRoute
}
export interface FileServerRoutesByTo {
  '/api/resize-image': typeof ApiResizeImageServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/resize-image': typeof ApiResizeImageServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/resize-image'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/resize-image'
  id: '__root__' | '/api/resize-image'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiResizeImageServerRoute: typeof ApiResizeImageServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/account': {
      id: '/_protected/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof ProtectedAccountRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/rooms/$slug': {
      id: '/_protected/rooms/$slug'
      path: '/rooms/$slug'
      fullPath: '/rooms/$slug'
      preLoaderRoute: typeof ProtectedRoomsSlugRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/resize-image': {
      id: '/api/resize-image'
      path: '/api/resize-image'
      fullPath: '/api/resize-image'
      preLoaderRoute: typeof ApiResizeImageServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedAccountRoute: typeof ProtectedAccountRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedRoomsSlugRoute: typeof ProtectedRoomsSlugRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAccountRoute: ProtectedAccountRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedRoomsSlugRoute: ProtectedRoomsSlugRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiResizeImageServerRoute: ApiResizeImageServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
